generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model fibre_categories {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  fibres      fibres[]
}

model fibres {
  id                  String                   @id @default(uuid()) @db.Uuid
  fibre_name          String
  fibre_code          String
  stock_kg            Decimal                  @db.Decimal(10, 2)
  description         String?
  created_at          DateTime                 @default(now()) @db.Timestamp(6)
  updated_at          DateTime                 @default(now()) @db.Timestamp(6)
  category_id         String?                  @db.Uuid
  closing_stock       Decimal?                 @db.Decimal(10, 2)
  consumed_stock      Decimal?                 @db.Decimal(10, 2)
  inward_stock        Decimal?                 @db.Decimal(10, 2)
  outward_stock       Decimal?                 @db.Decimal(10, 2)
  blend_fibres        blend_fibres[]
  fiber_usage_history fiber_usage_history[]
  restock_requests    fibre_restock_requests[]
  fibre_transfers     fibre_transfers[]
  fibre_usage_logs    fibre_usage_logs[]
  category            fibre_categories?        @relation(fields: [category_id], references: [id])
  shade_fibres        shade_fibres[]
}

model blend_fibres {
  id         String @id @default(uuid()) @db.Uuid
  blend_id   String @db.Uuid
  fibre_id   String @db.Uuid
  percentage Int
  blends     blends @relation(fields: [blend_id], references: [id], onDelete: Cascade)
  fibres     fibres @relation(fields: [fibre_id], references: [id], onDelete: Cascade)

  @@unique([blend_id, fibre_id])
}

model blends {
  id           String         @id @default(uuid()) @db.Uuid
  blend_code   String?
  description  String?
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  updated_at   DateTime?      @default(now()) @db.Timestamp(6)
  blend_fibres blend_fibres[]
}

model shades {
  id                      String                    @id @default(uuid()) @db.Uuid
  shade_code              String
  shade_name              String
  created_at              DateTime?                 @default(now()) @db.Timestamp(6)
  description             String?
  updated_at              DateTime?                 @default(now()) @db.Timestamp(6)
  percentage              String?
  orders                  orders[]
  raw_cotton_compositions raw_cotton_compositions[]
  shade_fibres            shade_fibres[]
}

model shade_fibres {
  id         String  @id @default(uuid()) @db.Uuid
  shade_id   String  @db.Uuid
  fibre_id   String  @db.Uuid
  percentage Decimal @db.Decimal(5, 2)
  fibre      fibres  @relation(fields: [fibre_id], references: [id], onDelete: Cascade)
  shade      shades  @relation(fields: [shade_id], references: [id], onDelete: Cascade)

  @@unique([shade_id, fibre_id])
}

model tenants {
  id            String          @id @default(uuid()) @db.Uuid
  name          String
  domain        String?
  plan          String?         @default("free")
  is_active     Boolean?        @default(true)
  storage_path  String?
  expires_at    DateTime?
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  updated_at    DateTime?       @default(now()) @db.Timestamp(6)
  orders        orders[]
  productions   productions[]
  roles         roles[]
  settings      settings?
  subscriptions subscriptions[]
  users         users[]
}

model subscriptions {
  id         String    @id @default(uuid()) @db.Uuid
  tenant_id  String?   @db.Uuid
  plan_id    String?   @db.Uuid
  plan       plan?     @relation(fields: [plan_id], references: [id])
  plan_type  String?
  start_date DateTime? @db.Date
  end_date   DateTime? @db.Date
  is_active  Boolean?  @default(true)
  tenants    tenants?  @relation(fields: [tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                  String                     @id @default(uuid()) @db.Uuid
  tenant_id           String?                    @db.Uuid
  name                String?
  email               String                     @unique
  password_hash       String
  verification_token  String?                    @unique
  role                String?
  is_active           Boolean?                   @default(true)
  is_verified         Boolean                    @default(false)
  created_at          DateTime?                  @default(now()) @db.Timestamp(6)
  updated_at          DateTime?                  @default(now()) @db.Timestamp(6)
  productions         productions[]
  user_roles          user_roles[]
  user_settings       user_settings?
  tenants             tenants?                   @relation(fields: [tenant_id], references: [id])
  verification_tokens user_verification_tokens[]
}

model user_settings {
  id                  String   @id @default(uuid()) @db.Uuid
  user_id             String   @unique @db.Uuid
  theme               String   @default("auto")
  locale              String   @default("en")
  email_notifications Boolean  @default(true)
  sms_alerts          Boolean  @default(false)
  feature_toggles     Json?
  created_at          DateTime @default(now())
  updated_at          DateTime @default(now())
  user                users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model settings {
  id                   String    @id @default(uuid()) @db.Uuid
  tenant_id            String    @unique @db.Uuid
  theme                String    @default("auto")
  locale               String    @default("en")
  email_notifications  Boolean   @default(true)
  sms_alerts           Boolean   @default(false)
  production_reminders Boolean   @default(true)
  plan_type            String?
  billing_start_date   DateTime?
  billing_end_date     DateTime?
  integration_ai       Boolean   @default(false)
  integration_tally    Boolean   @default(false)
  feature_toggles      Json?
  created_at           DateTime  @default(now())
  updated_at           DateTime  @default(now())
  tenant               tenants   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
}

model roles {
  id               String             @id @default(uuid()) @db.Uuid
  tenant_id        String             @db.Uuid
  name             String
  description      String?
  permissions      Json?
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now())
  role_permissions role_permissions[]
  tenant           tenants            @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  user_roles       user_roles[]

  @@unique([tenant_id, name])
}

model user_roles {
  id      String @id @default(uuid()) @db.Uuid
  user_id String @db.Uuid
  role_id String @db.Uuid
  role    roles  @relation(fields: [role_id], references: [id], onDelete: Cascade)
  user    users  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, role_id])
}

model permissions {
  id               String             @id @default(uuid()) @db.Uuid
  code             String             @unique
  description      String
  role_permissions role_permissions[]
}

model role_permissions {
  id            String      @id @default(uuid()) @db.Uuid
  role_id       String      @db.Uuid
  permission_id String      @db.Uuid
  permission    permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          roles       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([role_id, permission_id])
}

model fiber_usage_history {
  id       String   @id @default(uuid()) @db.Uuid
  fibre_id String   @db.Uuid
  date     DateTime
  usedKg   Decimal  @db.Decimal(10, 2)
  fibre    fibres   @relation(fields: [fibre_id], references: [id])
}

model fibre_usage_logs {
  id       String   @id @default(uuid()) @db.Uuid
  fibre_id String   @db.Uuid
  used_kg  Decimal  @db.Decimal(10, 2)
  used_on  DateTime @default(now())
  fibre    fibres   @relation(fields: [fibre_id], references: [id], onDelete: Cascade)

  @@index([fibre_id])
}

model orders {
  id            String        @id @default(uuid()) @db.Uuid
  order_number  String        @unique
  buyer_id      String        @db.Uuid
  shade_id      String        @db.Uuid
  delivery_date DateTime
  quantity_kg   Decimal       @db.Decimal(10, 2)
  status        String        @default("pending")
  created_at    DateTime      @default(now())
  updated_at    DateTime      @default(now())
  tenant_id     String        @db.Uuid
  created_by    String
  realisation   Decimal?      @db.Decimal(5, 2)
  count         Int?
  buyer         buyers        @relation(fields: [buyer_id], references: [id])
  shade         shades        @relation(fields: [shade_id], references: [id])
  tenant        tenants       @relation(fields: [tenant_id], references: [id])
  productions   productions[]
}

model productions {
  id         String            @id @default(uuid()) @db.Uuid
  date       DateTime
  section    String
  remarks    String?
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
  order_id   String?           @db.Uuid
  tenant_id  String            @db.Uuid
  autoconer  Json[]
  blow_room  Json
  carding    Json[]
  created_by String            @db.Uuid
  drawing    Json[]
  framing    Json[]
  simplex    Json[]
  spinning   Json[]
  total      Decimal           @default(0)
  logs       production_logs[]
  creator    users             @relation(fields: [created_by], references: [id])
  order      orders?           @relation(fields: [order_id], references: [id])
  tenant     tenants           @relation(fields: [tenant_id], references: [id])

  @@unique([date, tenant_id])
  @@index([date])
  @@index([tenant_id])
  @@index([order_id])
}

model buyers {
  id                String             @id @default(uuid()) @db.Uuid
  name              String
  contact           String?
  email             String?
  address           String?
  created_at        DateTime           @default(now())
  updated_at        DateTime           @default(now())
  mailingListBuyers MailingListBuyer[]
  orders            orders[]
}

model production_logs {
  id            String      @id @default(uuid()) @db.Uuid
  production_id String      @db.Uuid
  log_date      DateTime    @default(now())
  shift         String
  machine       String
  section       String
  operator      String?
  production_kg Decimal     @db.Decimal(10, 2)
  remarks       String?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @default(now())
  production    productions @relation(fields: [production_id], references: [id], onDelete: Cascade)
}

model suppliers {
  id              String                   @id @default(uuid()) @db.Uuid
  name            String
  contact         String?
  email           String?
  address         String?
  is_active       Boolean                  @default(true)
  created_at      DateTime                 @default(now())
  updated_at      DateTime                 @default(now())
  fibre_requests  fibre_restock_requests[]
  fibre_transfers fibre_transfers[]
}

model fibre_restock_requests {
  id            String    @id @default(uuid()) @db.Uuid
  fibre_id      String    @db.Uuid
  supplier_id   String    @db.Uuid
  requested_kg  Decimal   @db.Decimal(10, 2)
  status        String    @default("requested")
  expected_date DateTime?
  notes         String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())
  fibre         fibres    @relation(fields: [fibre_id], references: [id], onDelete: Cascade)
  supplier      suppliers @relation(fields: [supplier_id], references: [id], onDelete: Cascade)

  @@index([fibre_id])
  @@index([supplier_id])
}

model fibre_transfers {
  id              String    @id @default(uuid()) @db.Uuid
  fibre_id        String    @db.Uuid
  supplier_id     String    @db.Uuid
  sent_kg         Decimal   @db.Decimal(10, 2)
  sent_date       DateTime
  expected_return DateTime?
  returned_kg     Decimal?  @db.Decimal(10, 2)
  return_date     DateTime?
  notes           String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @default(now())
  fibre           fibres    @relation(fields: [fibre_id], references: [id], onDelete: Cascade)
  supplier        suppliers @relation(fields: [supplier_id], references: [id], onDelete: Cascade)

  @@index([fibre_id])
  @@index([supplier_id])
}

model raw_cotton_compositions {
  id         String   @id @default(uuid()) @db.Uuid
  shade_id   String   @db.Uuid
  cotton_id  String   @db.Uuid
  percentage Decimal  @db.Decimal(5, 2)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  cotton     cottons  @relation(fields: [cotton_id], references: [id])
  shade      shades   @relation(fields: [shade_id], references: [id])

  @@unique([shade_id, cotton_id])
  @@index([shade_id])
  @@index([cotton_id])
}

model cottons {
  id           String                    @id @default(uuid()) @db.Uuid
  lot_number   String?
  stock_kg     Decimal?                  @db.Decimal(10, 2)
  grade        String?
  source       String?
  notes        String?
  created_at   DateTime                  @default(now())
  updated_at   DateTime?                 @updatedAt
  compositions raw_cotton_compositions[]
}

model employees {
  id         String       @id @default(uuid()) @db.Uuid
  name       String
  token_no   String       @unique
  shift_rate Decimal      @db.Decimal(10, 2)
  aadhar_no  String       @unique
  bank_acc_1 String
  bank_acc_2 String?
  department String?
  join_date  DateTime?
  created_at DateTime     @default(now())
  updated_at DateTime     @default(now()) @updatedAt
  Attendance Attendance[]
}

model MailingList {
  id                String             @id @default(uuid()) @db.Uuid
  name              String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  mailingListBuyers MailingListBuyer[]
}

model MailingListBuyer {
  id            String      @id @default(uuid())
  mailingListId String      @db.Uuid
  buyerId       String      @db.Uuid
  buyer         buyers      @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  mailingList   MailingList @relation(fields: [mailingListId], references: [id], onDelete: Cascade)

  @@unique([mailingListId, buyerId])
}

model EmailTemplate {
  name      String
  subject   String
  bodyHtml  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  id        String   @id @default(uuid()) @db.Uuid
}

model Campaign {
  id         String   @id @default(uuid())
  tenant_id  String
  subject    String
  bodyHtml   String
  createdAt  DateTime @default(now())
  name       String
  recipients String[]
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  HALF_DAY
}

enum ShiftType {
  SHIFT_1
  SHIFT_2
  SHIFT_3
}

model Attendance {
  id              String           @id @default(uuid())
  employee_id     String           @db.Uuid
  employee        employees        @relation(fields: [employee_id], references: [id])
  date            DateTime         // Only store the date part (strip time in logic)
  shift           ShiftType?
  in_time         DateTime
  out_time        DateTime
  overtime_hours  Float
  total_hours     Float            // total = 8 + overtime_hours
  status          AttendanceStatus
  last_updated_by String?          @db.Uuid
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt

  @@unique([date, employee_id])
}
model PotentialBuyer {
  id        String   @id @default(cuid())
  company   String
  person    String
  email     String   @unique
  phone     String?
  notes     String?
  createdAt DateTime @default(now())
}

model MailingListRecipient {
  id            String   @id @default(uuid()) @db.Uuid
  mailingListId String   @db.Uuid
  name          String
  email         String
  company       String
  source        String
  createdAt     DateTime @default(now())

  @@index([mailingListId])
}

model purchase_orders {
  id                    String    @id @default(uuid()) @db.Uuid
  tenant_id             String    @db.Uuid
  po_number             String
  po_date               DateTime?
  status                String    @default("uploaded")
  linked_sales_order_id String?   @db.Uuid
  buyer_name            String
  buyer_contact_name    String?
  buyer_contact_phone   String?
  buyer_email           String?
  buyer_address         String?
  buyer_gst_no          String?
  buyer_pan_no          String?
  supplier_name         String?
  supplier_gst_no       String?
  payment_terms         String?
  style_ref_no          String?
  delivery_address      String?
  tax_details           Json?
  grand_total           Decimal   @db.Decimal(12, 2)
  amount_in_words       String?
  notes                 String?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @default(now())
  created_by            String?
}

model purchase_order_items {
  id                String   @id @default(uuid()) @db.Uuid
  purchase_order_id String   @db.Uuid
  order_code        String?
  yarn_description  String
  color             String?
  count             Int?
  uom               String?
  bag_count         Int?
  quantity          Decimal  @db.Decimal(10, 2)
  rate              Decimal  @db.Decimal(10, 2)
  gst_percent       Decimal? @db.Decimal(4, 2)
  taxable_amount    Decimal  @db.Decimal(12, 2)
  shade_no          String?
}



model plan {
  id           String   @id @default(uuid()) @db.Uuid
  name         String
  price        Float
  billingCycle String
  renewal_date DateTime @default(now()) @db.Date
  description  String?
  features     Json // array of strings
  maxUsers     Json // can be int or "Unlimited"
  maxOrders    Json // same
  maxStorage   String
  popular      Boolean
  is_active    Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  subscriptions subscriptions[]
}

model user_verification_tokens {
  id         String   @id @default(uuid())
  user_id    String   @db.Uuid
  token      String   @unique
  expires_at DateTime
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}
