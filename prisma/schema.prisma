generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model fibre_categories {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  description String?
  fibres      fibres[] // ⬅️ One-to-many relationship
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
}

model fibres {
  id          String            @id @default(uuid()) @db.Uuid
  fibre_name  String
  fibre_code  String
  stock_kg    Decimal           @db.Decimal(10, 2)
  description String?
  category_id String?           @db.Uuid
  category    fibre_categories? @relation(fields: [category_id], references: [id], onDelete: SetNull)

  blend_fibres blend_fibres[]
  shade_fibres shade_fibres[]

  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
}

model blend_fibres {
  id         String @id @default(uuid()) @db.Uuid
  blend_id   String @db.Uuid
  fibre_id   String @db.Uuid
  percentage Int

  blends blends @relation(fields: [blend_id], references: [id], onDelete: Cascade)
  fibres fibres @relation(fields: [fibre_id], references: [id], onDelete: Cascade)

  @@unique([blend_id, fibre_id])
}

model blends {
  id           String         @id @default(uuid()) @db.Uuid
  blend_code   String?
  description  String?
  blend_fibres blend_fibres[]
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  updated_at   DateTime?      @default(now()) @db.Timestamp(6)
}

model shades {
  id           String         @id @default(uuid()) @db.Uuid
  shade_code   String
  shade_name   String
  percentage   String?
  description  String?
  shade_fibres shade_fibres[] // ✅ NEW: relation to fibre compositions
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  updated_at   DateTime?      @default(now()) @db.Timestamp(6)

  orders orders[] // ✅ Add this to link orders
}

model shade_fibres {
  id         String  @id @default(uuid()) @db.Uuid
  shade_id   String  @db.Uuid
  fibre_id   String  @db.Uuid
  percentage Decimal @db.Decimal(5, 2) // ✅ Allow up to 2 decimal places

  shade shades @relation(fields: [shade_id], references: [id], onDelete: Cascade)
  fibre fibres @relation(fields: [fibre_id], references: [id], onDelete: Cascade)

  @@unique([shade_id, fibre_id]) // ✅ Prevent duplicate fibre usage in a shade
}

model subscriptions {
  id         String    @id @default(uuid()) @db.Uuid
  tenant_id  String?   @db.Uuid
  plan_type  String?
  start_date DateTime? @db.Date
  end_date   DateTime? @db.Date
  is_active  Boolean?  @default(true)
  tenants    tenants?  @relation(fields: [tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model tenants {
  id         String    @id @default(uuid()) @db.Uuid
  name       String
  domain     String?
  plan       String?   @default("free")
  is_active  Boolean?  @default(true)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)

  subscriptions subscriptions[]
  users         users[]
  orders        orders[]
}

model users {
  id            String    @id @default(uuid()) @db.Uuid
  tenant_id     String?   @db.Uuid
  name          String?
  email         String    @unique
  password_hash String
  role          String?
  is_active     Boolean?  @default(true)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @db.Timestamp(6)

  tenants tenants? @relation(fields: [tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model orders {
  id           String @id @default(uuid()) @db.Uuid
  order_number String @unique
  buyer_id     String @db.Uuid
  buyer        buyers @relation(fields: [buyer_id], references: [id], onDelete: Cascade)

  shade_id String @db.Uuid
  shade    shades @relation(fields: [shade_id], references: [id], onDelete: Cascade)

  tenant_id String  @db.Uuid // ✅ Add this
  tenant    tenants @relation(fields: [tenant_id], references: [id])

  delivery_date DateTime
  quantity_kg   Decimal  @db.Decimal(10, 2)
  status        String   @default("pending") // "pending", "in_progress", "completed"
  created_by    String

  realisation Decimal? @db.Decimal(5, 2) // ✅ Optional field for realisation %

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model buyers {
  id         String   @id @default(uuid()) @db.Uuid
  name       String
  contact    String?
  email      String?
  address    String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  orders orders[]
}
