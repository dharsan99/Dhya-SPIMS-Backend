generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FibreCategory {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  fibres      Fibre[]

  @@map("fibre_categories")
}

model Fibre {
  id            String         @id @default(uuid()) @db.Uuid
  description   String?
  categoryId    String?        @db.Uuid
  closingStock  Decimal?       @db.Decimal(10, 2)
  consumedStock Decimal?       @db.Decimal(10, 2)
  createdAt     DateTime       @default(now()) @db.Timestamp(6)
  fibreCode     String
  fibreName     String
  inwardStock   Decimal?       @db.Decimal(10, 2)
  outwardStock  Decimal?       @db.Decimal(10, 2)
  stockKg       Decimal        @db.Decimal(10, 2)
  updatedAt     DateTime       @updatedAt @db.Timestamp(6)
  blendFibres   BlendFibre[]
  category      FibreCategory? @relation(fields: [categoryId], references: [id])
  shadeFibres   ShadeFibre[]

  @@map("fibres")
}

model BlendFibre {
  id         String @id @default(uuid()) @db.Uuid
  percentage Int
  blendId    String @db.Uuid
  fibreId    String @db.Uuid
  blend      Blend  @relation(fields: [blendId], references: [id], onDelete: Cascade)
  fibre      Fibre  @relation(fields: [fibreId], references: [id], onDelete: Cascade)

  @@unique([blendId, fibreId])
  @@map("blend_fibres")
}

model Blend {
  id          String       @id @default(uuid()) @db.Uuid
  description String?
  blendCode   String?
  createdAt   DateTime?    @default(now()) @db.Timestamp(6)
  updatedAt   DateTime?    @updatedAt @db.Timestamp(6)
  blendFibres BlendFibre[]

  @@map("blends")
}

model Shade {
  id          String       @id @default(uuid()) @db.Uuid
  description String?
  percentage  String?
  createdAt   DateTime?    @default(now()) @db.Timestamp(6)
  shadeCode   String
  shadeName   String
  tenantId    String?      @db.Uuid
  updatedAt   DateTime?    @updatedAt @db.Timestamp(6)
  shadeFibres ShadeFibre[]
  tenant      Tenant?      @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@map("shades")
}

model ShadeFibre {
  id         String  @id @default(uuid()) @db.Uuid
  percentage Decimal @db.Decimal(5, 2)
  fibreId    String  @db.Uuid
  shadeId    String  @db.Uuid
  fibre      Fibre   @relation(fields: [fibreId], references: [id], onDelete: Cascade)
  shade      Shade   @relation(fields: [shadeId], references: [id], onDelete: Cascade)

  @@unique([shadeId, fibreId])
  @@map("shade_fibres")
}

model Tenant {
  id           String    @id @default(uuid()) @db.Uuid
  name         String
  domain       String?
  plan         String?   @default("free")
  address      String?
  createdAt    DateTime? @default(now()) @db.Timestamp(6)
  expires_at   DateTime?
  industry     String?
  isActive     Boolean?  @default(true)
  logo         String?
  phone        String?
  storage_path String?
  updatedAt    DateTime? @updatedAt @db.Timestamp(6)
  shades       Shade[]
  users        Users[]

  @@map("tenants")
}

model Subscription {
  id        String    @id @default(uuid()) @db.Uuid
  endDate   DateTime? @db.Date
  isActive  Boolean?  @default(true)
  planId    String?   @db.Uuid
  planType  String?
  startDate DateTime? @db.Date
  tenantId  String?   @db.Uuid
  plan      Plan?     @relation(fields: [planId], references: [id])

  @@map("subscriptions")
}

model Plan {
  id            String         @id @default(uuid()) @db.Uuid
  name          String
  price         Float
  billingCycle  String
  renewalDate   DateTime       @default(now()) @db.Date
  expiryDate    DateTime?
  description   String?
  features      Json
  maxUsers      Json
  maxOrders     Json
  maxStorage    String
  popular       Boolean
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model Users {
  id                   String    @id @default(uuid()) @db.Uuid
  name                 String?
  email                String    @unique
  role                 String?
  createdAt            DateTime? @default(now()) @db.Timestamp(6)
  isActive             Boolean?  @default(true)
  isVerified           Boolean   @default(false)
  passwordHash         String
  tenantId             String?   @db.Uuid
  tenant              Tenant?   @relation(fields: [tenantId], references: [id])
  updatedAt            DateTime? @updatedAt @db.Timestamp(6)
  verificationToken    String?
  resetPasswordToken   String?
  resetPasswordExpires DateTime? @db.Timestamp(6)

  // Add this relation:
  userRoles UserRole[]

  @@map("users")
}

model UserRole {
  id     String @id @default(uuid()) @db.Uuid
  roleId String @db.Uuid
  userId String @db.Uuid

  // Relations
  role Role  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model UserSetting {
  id                 String   @id @default(uuid()) @db.Uuid
  theme              String   @default("auto")
  locale             String   @default("en")
  createdAt          DateTime @default(now())
  emailNotifications Boolean  @default(true)
  featureToggles     Json?
  smsAlerts          Boolean  @default(false)
  updatedAt          DateTime @updatedAt
  userId             String   @unique @db.Uuid

  @@map("user_settings")
}

model Setting {
  id                  String    @id @default(uuid()) @db.Uuid
  theme               String    @default("auto")
  locale              String    @default("en")
  billingEndDate      DateTime?
  billingStartDate    DateTime?
  createdAt           DateTime  @default(now())
  emailNotifications  Boolean   @default(true)
  featureToggles      Json?
  integrationAi       Boolean   @default(false)
  integrationTally    Boolean   @default(false)
  planType            String?
  productionReminders Boolean   @default(true)
  smsAlerts           Boolean   @default(false)
  tenantId            String    @unique @db.Uuid
  updatedAt           DateTime  @updatedAt

  @@map("settings")
}

model Role {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  permissions Json?
  createdAt   DateTime @default(now())
  tenantId    String   @db.Uuid
  updatedAt   DateTime @updatedAt

  userRoles   UserRole[]  // Added for relation with UserRole

  @@unique([tenantId, name])
  @@map("roles")
}

model Permission {
  id          String @id @default(uuid()) @db.Uuid
  code        String @unique
  description String

  @@map("permissions")
}

model RolePermission {
  id           String @id @default(uuid()) @db.Uuid
  permissionId String @db.Uuid
  roleId       String @db.Uuid

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Production {
  id        String   @id @default(uuid()) @db.Uuid
  date      DateTime
  section   String
  remarks   String?
  createdAt DateTime @default(now())
  createdBy String   @db.Uuid
  orderId   String?  @db.Uuid
  tenantId  String   @db.Uuid
  total     Decimal  @default(0)
  updatedAt DateTime @updatedAt

  @@unique([date, tenantId])
  @@index([date])
  @@index([tenantId])
  @@index([orderId])
  @@map("productions")
}

model ProductionLog {
  id           String   @id @default(uuid()) @db.Uuid
  shift        String
  section      String
  remarks      String?
  createdAt    DateTime @default(now())
  efficiency   Decimal? @db.Decimal(5, 2)
  logDate      DateTime @default(now())
  machineId    String
  operatorName String?
  outputKg     Decimal  @db.Decimal(10, 2)
  productionId String   @db.Uuid
  updatedAt    DateTime @updatedAt

  @@index([productionId])
  @@index([section])
  @@index([logDate])
  @@map("production_logs")
}

model Buyer {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  contact   String?
  email     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("buyers")
}

model Supplier {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  contact   String?
  email     String?
  address   String?
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)
  updatedAt DateTime @updatedAt

  @@map("suppliers")
}

model Employee {
  id         String    @id @default(uuid()) @db.Uuid
  name       String
  tokenNo    String    @unique
  shiftRate  Decimal   @db.Decimal(10, 2)
  aadharNo   String    @unique
  bankAcc1   String
  bankAcc2   String?
  department String?
  joinDate   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("employees")
}

model Order {
  id           String    @id @default(uuid()) @db.Uuid
  status       String    @default("pending")
  buyerId      String    @db.Uuid
  createdAt    DateTime  @default(now())
  deliveryDate DateTime?
  notes        String?
  orderDate    DateTime  @default(now())
  orderNumber  String    @unique
  quantity     Decimal   @db.Decimal(10, 2)
  shadeId      String    @db.Uuid
  tenantId     String    @db.Uuid
  totalAmount  Decimal   @db.Decimal(12, 2)
  unitPrice    Decimal   @db.Decimal(10, 2)
  updatedAt    DateTime  @updatedAt

  @@map("orders")
}

model PurchaseOrder {
  id                 String    @id @default(uuid()) @db.Uuid
  tenantId           String    @db.Uuid
  poNumber           String
  poDate             DateTime?
  status             String    @default("pending")
  linkedSalesOrderId String?   @db.Uuid
  buyerName          String
  buyerContactName   String?
  buyerContactPhone  String?
  buyerEmail         String?
  buyerAddress       String?
  buyerGstNo         String?
  buyerPanNo         String?
  supplierName       String?
  supplierGstNo      String?
  paymentTerms       String?
  styleRefNo         String?
  deliveryAddress    String?
  taxDetails         Json?
  grandTotal         Decimal   @db.Decimal(12, 2)
  amountInWords      String?
  notes              String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  createdBy          String?

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String   @id @default(uuid()) @db.Uuid
  purchaseOrderId String   @db.Uuid
  orderCode       String?
  yarnDescription String
  color           String?
  count           Int?
  uom             String?
  bagCount        Int?
  quantity        Decimal  @db.Decimal(10, 2)
  rate            Decimal  @db.Decimal(10, 2)
  gstPercent      Decimal? @db.Decimal(4, 2)
  taxableAmount   Decimal  @db.Decimal(12, 2)
  shadeNo         String?

  @@map("purchase_order_items")
}

model FibreRestockRequest {
  id           String    @id @default(uuid()) @db.Uuid
  status       String    @default("requested")
  notes        String?
  createdAt    DateTime  @default(now())
  expectedDate DateTime?
  fibreId      String    @db.Uuid
  requestedKg  Decimal   @db.Decimal(10, 2)
  supplierId   String    @db.Uuid
  updatedAt    DateTime  @updatedAt

  @@index([fibreId])
  @@index([supplierId])
  @@map("fibre_restock_requests")
}

model FibreTransfer {
  id             String    @id @default(uuid()) @db.Uuid
  notes          String?
  createdAt      DateTime  @default(now())
  expectedReturn DateTime?
  fibreId        String    @db.Uuid
  returnDate     DateTime?
  returnedKg     Decimal?  @db.Decimal(10, 2)
  sentDate       DateTime
  sentKg         Decimal   @db.Decimal(10, 2)
  supplierId     String    @db.Uuid
  updatedAt      DateTime  @updatedAt
  status         String?   @default("pending") @db.VarChar(255)

  @@index([fibreId])
  @@index([supplierId])
  @@map("fibre_transfers")
}

model FiberUsageHistory {
  id        String   @id @default(uuid()) @db.Uuid
  usedKg    Decimal  @db.Decimal(10, 2)
  fibreId   String   @db.Uuid
  notes     String?
  usageDate DateTime @default(now())

  @@map("fiber_usage_history")
}

model FibreUsageLog {
  id        String   @id @default(uuid()) @db.Uuid
  fibreId   String   @db.Uuid
  notes     String?
  operation String
  quantity  Decimal  @db.Decimal(10, 2)
  timestamp DateTime @default(now())

  @@map("fibre_usage_logs")
}

model RawCottonComposition {
  id         String   @id @default(uuid()) @db.Uuid
  shadeId    String   @db.Uuid
  cottonId   String   @db.Uuid
  percentage Decimal  @db.Decimal(5, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([shadeId, cottonId])
  @@index([shadeId])
  @@index([cottonId])
  @@map("raw_cotton_compositions")
}

model Cotton {
  id        String   @id @default(uuid()) @db.Uuid
  lotNumber String?
  stockKg   Decimal? @db.Decimal(10, 2)
  grade     String?
  source    String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cottons")
}

model Attendance {
  id            String           @id @default(uuid())
  date          DateTime
  shift         String
  overtimeHours Float
  totalHours    Float
  status        AttendanceStatus
  employeeId    String           @db.Uuid
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  inTime        DateTime
  lastUpdatedBy String?          @db.Uuid
  outTime       DateTime

  @@unique([date, employeeId])
  @@map("Attendance")
}

model MailingList {
  id               String   @id @default(uuid()) @db.Uuid
  name             String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  resendAudienceId String?  @unique

  @@map("MailingList")
}

model MailingListBuyer {
  id            String @id @default(uuid())
  mailingListId String @db.Uuid
  buyerId       String @db.Uuid

  @@unique([mailingListId, buyerId])
  @@map("MailingListBuyer")
}

model EmailTemplate {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  subject   String
  bodyHtml  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("EmailTemplate")
}

model Campaign {
  id         String   @id @default(uuid()) @db.Uuid
  tenantId   String
  subject    String
  bodyHtml   String
  createdAt  DateTime @default(now())
  name       String
  recipients String[]

  @@map("Campaign")
}

model EmailEvent {
  id         String         @id @default(uuid()) @db.Uuid
  emailId    String
  campaignId String?        @db.Uuid
  recipient  String
  eventType  EmailEventType
  eventData  Json?
  createdAt  DateTime       @default(now())

  @@index([emailId])
  @@index([recipient])
  @@index([eventType])
  @@index([campaignId])
  @@map("EmailEvent")
}

model BouncedEmail {
  id            String     @id @default(uuid()) @db.Uuid
  email         String     @unique
  bounceType    BounceType
  bounceMessage String?
  lastBounced   DateTime   @default(now())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([email])
  @@map("BouncedEmail")
}

model PotentialBuyer {
  id        String   @id @default(uuid()) @db.Uuid
  company   String
  person    String
  email     String   @unique
  phone     String?
  notes     String?
  createdAt DateTime @default(now())

  @@map("PotentialBuyer")
}

model CompanyPersona {
  id                    String   @id @default(uuid()) @db.Uuid
  tenantId              String   @unique @db.Uuid
  executiveSummary      String
  targetMarketSweetSpot String
  swotAnalysis          Json
  detailedAnalysis      Json
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("CompanyPersona")
}

model GrowthCampaign {
  id        String         @id @default(uuid()) @db.Uuid
  tenantId  String         @db.Uuid
  name      String
  keywords  String[]
  region    String?
  status    CampaignStatus @default(DRAFT)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("GrowthCampaign")
}

model DiscoveredBrand {
  id                 String      @id @default(uuid()) @db.Uuid
  campaignId         String      @db.Uuid
  companyName        String
  website            String?
  productFitAnalysis String
  discoverySource    String?
  status             BrandStatus @default(DISCOVERED)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  @@map("DiscoveredBrand")
}

model DiscoveredSupplier {
  id                String   @id @default(uuid()) @db.Uuid
  companyName       String
  country           String?
  specialization    String?
  sourceUrl         String?
  relevanceScore    Int?     @default(0)
  discoveredBrandId String   @db.Uuid
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([discoveredBrandId])
  @@map("DiscoveredSupplier")
}

model TargetContact {
  id                   String        @id @default(uuid()) @db.Uuid
  name                 String
  title                String?
  email                String?
  linkedinUrl          String?
  source               String?       @default("n8n-apollo-enrichment")
  status               ContactStatus @default(ACTIVE)
  discoveredSupplierId String        @db.Uuid
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  @@index([discoveredSupplierId])
  @@index([email])
  @@map("TargetContact")
}

model OutreachEmail {
  id               String         @id @default(uuid()) @db.Uuid
  status           OutreachStatus @default(DRAFT)
  subject          String
  body             String
  serviceMessageId String?
  sentAt           DateTime?
  targetContactId  String         @db.Uuid
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([targetContactId])
  @@index([status])
  @@map("OutreachEmail")
}

model OutreachEmailEvent {
  id              String         @id @default(uuid()) @db.Uuid
  type            EmailEventType
  ipAddress       String?
  userAgent       String?
  outreachEmailId String         @db.Uuid
  createdAt       DateTime       @default(now())

  @@index([outreachEmailId])
  @@index([type])
  @@map("OutreachEmailEvent")
}

model FollowUpTask {
  id               String       @id @default(uuid()) @db.Uuid
  tenantId         String       @db.Uuid
  title            String
  status           TaskStatus   @default(TODO)
  priority         TaskPriority @default(MEDIUM)
  notes            String?
  dueDate          DateTime?
  relatedContactId String?      @db.Uuid
  relatedEmailId   String?      @unique @db.Uuid
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  @@index([tenantId])
  @@index([status])
  @@map("FollowUpTask")
}

model Billing {
  id            String    @id @default(uuid()) @db.Uuid
  tenantId      String?   @db.Uuid
  invoiceNumber String    @unique
  amount        Float
  dueDate       DateTime
  paidDate      DateTime?
  status        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
}

model Payment {
  id        String   @id @default(uuid())
  billingId String   @db.Uuid
  tenantId  String   @db.Uuid
  amount    Float
  paidAt    DateTime @default(now())
  method    String
  status    String
  txnId     String?
}

enum EmailEventType {
  SENT
  DELIVERED
  DELIVERY_DELAYED
  COMPLAINED
  BOUNCED
  OPENED
  CLICKED
}

enum BounceType {
  HARD
  SOFT
  SUPPRESSED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  HALF_DAY
  LEAVE
}

enum CampaignStatus {
  DRAFT
  ANALYZING
  READY_FOR_OUTREACH
  ACTIVE
  PAUSED
  COMPLETED
}

enum BrandStatus {
  DISCOVERED
  SUPPLIERS_IDENTIFIED
  CONTACTS_ENRICHED
  CONTACTED
  RESPONDED
  QUALIFIED
  CONVERTED
}

enum OutreachStatus {
  DRAFT
  QUEUED
  SENT
  FAILED
  REPLIED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

enum ContactStatus {
  ACTIVE
  DO_NOT_CONTACT
}
